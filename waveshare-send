#!/usr/bin/env python3
import argparse
import re
import tempfile
from typing import Literal
from typing import Optional

import pyperclip
import requests
from PIL import Image
from PIL import ImageEnhance
from PIL import ImageOps

BLACK = (0, 0, 0)
RED = (255, 0, 0)
WHITE = (255, 255, 255)

type Color = tuple[Literal[255], Literal[255], Literal[255]]


def resize_image(image, width, height, fit=False):
    im = image.copy()
    if fit:
        im = ImageOps.pad(im, (width, height), color=(255, 255, 255))
    else:
        im = ImageOps.fit(im, (width, height))
    return im


def convert_image(
    infile: str,
    max_width: int,
    max_height: int,
    brightness: Optional[float] = None,
    fit: bool = False,
    show: bool = False,
    rotate: int = 0,
    dither: bool = False,
) -> list[tuple[Color, Color]]:
    im = Image.open(infile).convert("RGB")

    if rotate:
        im = im.rotate(rotate, expand=True)

    im = resize_image(im, max_width, max_height, fit)

    if brightness:
        im = ImageEnhance.Contrast(im).enhance(1 / brightness)
        im = ImageEnhance.Brightness(im).enhance(brightness)

    palette = [0, 0, 0, 255, 255, 255, 255, 0, 0]
    palimg = Image.new("P", (16, 16))
    palimg.putpalette(palette)

    if dither:
        im_quantized = im.quantize(
            colors=3, method=2, palette=palimg, dither=Image.FLOYDSTEINBERG
        )
    else:
        im_quantized = im.quantize(
            colors=3, method=2, palette=palimg, dither=Image.NONE
        )

    im = im_quantized.convert("RGB")

    if show:
        im.show()

    contents = []

    for y in range(0, im.size[1]):
        for x in range(0, im.size[0]):
            pixel = im.getpixel((x, y))
            contents.append(pixel)

    pixel_pairs = []
    for pixel_counter in range(0, len(contents), 2):
        pixel_pairs.append((contents[pixel_counter], contents[pixel_counter + 1]))
    return pixel_pairs


def download_image(url: str) -> str:
    response = requests.get(url)
    response.raise_for_status()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
        temp_file.write(response.content)
        return temp_file.name


def send(
    ip: str,
    image_file: str,
    brightness: Optional[float] = None,
    fit: bool = False,
    rotate: int = 0,
    show: bool = False,
    dither: bool = False,
):
    pixel_pairs = convert_image(
        image_file,
        640,
        384,
        brightness=brightness,
        fit=fit,
        show=show,
        rotate=rotate,
        dither=dither,
    )
    chunks = []
    chunk = []
    encodict = {
        (WHITE, WHITE): "f",
        (WHITE, RED): "n",
        (WHITE, BLACK): "b",
        (RED, WHITE): "h",
        (RED, RED): "p",
        (RED, BLACK): "d",
        (BLACK, WHITE): "e",
        (BLACK, RED): "m",
        (BLACK, BLACK): "a",
    }
    for pair in pixel_pairs:
        chunk.append(encodict[pair])
        if len(chunk) == 1000:
            chunks.append("".join(chunk))
            chunk = []
    else:
        if chunk:
            chunks.append("".join(chunk))

    print("Sending...")
    requests.post(f"http://{ip}/EPDu_")
    for counter, chunk in enumerate(chunks):
        print(f"Sending chunk {counter}...")
        if counter == len(chunks) - 1:
            # No idea why this is needed at the end.
            requests.post(f"http://{ip}/{chunk}ahdaLOAD_")
        else:
            requests.post(f"http://{ip}/{chunk}iodaLOAD_")
    requests.post(f"http://{ip}/SHOW_")
    print("Done.")


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Send an image to a specified IP address."
    )
    parser.add_argument("ip", help="The IP address to send the image to")
    parser.add_argument("image", help="The path to the image file, or a URL")
    parser.add_argument(
        "-b",
        "--brighten",
        help="increase brightness by the given factor",
        action="store",
        dest="brightness",
        type=float,
    )
    parser.add_argument(
        "--fit", action="store_true", help="Fit the image to the display size"
    )
    parser.add_argument(
        "-r",
        "--rotate",
        type=int,
        choices=[90, 180, 270],
        help="Rotate the image by 90, 180, or 270 degrees",
    )
    parser.add_argument(
        "-s", "--show", action="store_true", help="Show the image before sending"
    )
    parser.add_argument(
        "-d", "--dither", action="store_true", help="Apply dithering to the image"
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_arguments()
    if args.image == "clipboard":
        image = pyperclip.paste()
    else:
        image = args.image

    if re.match(r"https?://", image):
        print(f"Downloading image from {image}")
        image = download_image(image)
        print(f"Image downloaded to {image}")

    send(
        args.ip,
        image,
        brightness=args.brightness,
        fit=args.fit,
        rotate=args.rotate,
        show=args.show,
        dither=args.dither,
    )
